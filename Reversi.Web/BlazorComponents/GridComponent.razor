@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Reversi.Web.Services.Interfaces
@inject IGameService GameService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IHttpContextAccessor HttpContextAccessor
<CascadingValue Value="@GameService">
    <div class="flex col-md-5">
		<MessageComponent/>
		<GameInformation/>
		<ScoreComponent/>
		<br />
		<label><b>Who I am:</b> @WhatColourAmI</label>
    </div>
</CascadingValue>
<div class="flex">
	<table>
		@for (int row = 0; row < DisplayedBoard.Length; row++)
		{
			<tr>
				@for (int col = 0; col < DisplayedBoard[row].Length; col++)
				{
					<td>
						<TileComponent message="@DisplayedBoard[row][col].ToString()" row="@row" column="@col" OnMoveSelected="MoveSelected"></TileComponent>
					</td>
				}
			</tr>
		}
	</table>
</div>
@code {
    public string WhatColourAmI;
    public string[] DisplayedBoard => GameService.GetOutput();
	public string UserId;
    protected async Task MoveSelected(string move)
    {
        var row = int.Parse(move.Split(',')[0]);
        var column = int.Parse(move.Split(',')[1]);

        GameService.PlaceCounter(row, column, hubConnection.ConnectionId);
        if (GameService.IsLastMoveValid())
        {
            await Send();
        }
    }



    //hub stuff
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
	    if(!HttpContextAccessor.HttpContext.Request.Cookies.ContainsKey("ReversiPlayerCookie"))
	    {
		    var userId = DateTime.Now.TimeOfDay.ToString();
            HttpContextAccessor.HttpContext.Response.Cookies.Append("ReversiPlayerCookie", userId);
		    UserId = userId;
	    }
	    else
	    {
		    UserId = HttpContextAccessor.HttpContext.Request.Cookies["ReversiPlayerCookie"];
	    }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub") , options =>
            {
                //options.AccessTokenProvider = async () =>
                //{
                //    var accessTokenResult = await AccessTokenProvider.RequestAccessToken();
                //    accessTokenResult.TryGetToken(out var accessToken);
                //    return accessToken.Value;
                //};
            }).Build();

        await hubConnection.StartAsync();

        // Add listener for future connections
        hubConnection.On<string>("AddPlayer", _ =>
        {
            GameService.AddPlayer(UserId);
            WhatColourAmI = GameService.GetPlayerColourString(UserId);
            InvokeAsync(StateHasChanged);
        });
        
        hubConnection.On<string>("RemovePlayer", _ =>
        {
            GameService.RemovePlayer(UserId);
            InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hubConnection.On("ReceiveUpdate", () =>
            {
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.SendAsync("AddPlayer"); // todo: consider unhardcoding the string, maybe using nameof keyword?
        }
    }

    async Task Send() => await hubConnection.SendAsync("SendUpdate");

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemovePlayer");
            await hubConnection.DisposeAsync();
        }
    }
}
