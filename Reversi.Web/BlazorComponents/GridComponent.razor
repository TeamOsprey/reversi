@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.SignalR.Client
@using Reversi.Web.Services.Interfaces
@inject IGameService GameService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<CascadingValue Value="@GameService">
    <MessageComponent />
    <GameInformation />
    <ScoreComponent />
</CascadingValue>

<table>
    @for (int row = 0; row < DisplayedBoard.Length; row++)
    {
        <tr>
            @for (int col = 0; col < DisplayedBoard[row].Length; col++)
            {
                <td>
                    <TileComponent message="@DisplayedBoard[row][col].ToString()" row="@row" column="@col" OnMoveSelected="MoveSelected"></TileComponent>
                </td>
            }
        </tr>
    }
</table>
@code {
    public string[] DisplayedBoard => GameService.GetOutput();

    protected async Task MoveSelected(string move)
    {
        var row = int.Parse(move.Split(',')[0]);
        var column = int.Parse(move.Split(',')[1]);

        GameService.PlaceCounter(row, column);
        if (GameService.IsLastMoveValid())
        {
            await Send();
        }
    }



    //hub stuff
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On("ReceiveUpdate", () =>
        {
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }
    async Task Send() =>
        await hubConnection.SendAsync("SendUpdate");
        // await hubConnection.SendAsync("SendUpdate", "BLACK"); // working on adding player to connection


    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
