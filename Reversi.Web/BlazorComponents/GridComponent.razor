@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.SignalR.Client
@using Reversi.Web.Services.Interfaces
@inject IGameService GameService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IHttpContextAccessor HttpContextAccessor
<CascadingValue Value="@GameService">
    <div class="flex col-md-5">
        <label><b>Who I am:</b> @WhatColourAmI</label>
        <ScoreComponent/>
        <WhoIAm UserId="@UserId"/>
        <MessageComponent IsUsersTurn="@IsUsersTurn" />
    </div>
</CascadingValue>
<div class="flex">
	<table>
		@for (int row = 0; row < DisplayedBoard.Length; row++)
		{
			<tr>
				@for (int col = 0; col < DisplayedBoard[row].Length; col++)
				{
					<td>
                        <TileComponent Message="@DisplayedBoard[row][col].ToString()" Row="@row" Column="@col" OnMoveSelected="MoveSelected" 
                                       ShowLegalSquares="@(IsUsersTurn && HasAllPlayers)"></TileComponent>
					</td>
				}
			</tr>
		}
	</table>
</div>
@code {
    
    [Parameter]
    public string UserId { get; set; }
    
    public string WhatColourAmI;
    public string[] DisplayedBoard => GameService.GetOutput();

    private bool IsUsersTurn => WhatColourAmI == GameService.GetCurrentPlayer();
    private bool HasAllPlayers => GameService.HasAllPlayers();

    protected async Task MoveSelected(string move)
    {
        var row = int.Parse(move.Split(',')[0]);
        var column = int.Parse(move.Split(',')[1]);

        GameService.PlaceCounter(row, column, UserId);
        if (GameService.IsLastMoveValid())
        {
            await RefreshUI();
        }
    }

    //hub stuff
    private HubConnection _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        await _hubConnection.StartAsync();

        // Add listener for future connections
        _hubConnection.On<string>("AddPlayer",
            async (newUserId) =>
            {
                GameService.AddPlayer(newUserId);
                WhatColourAmI = GameService.GetPlayerColourString(UserId);
                await InvokeAsync(StateHasChanged);
            }
        );

        _hubConnection.On<string>("RemovePlayer", _ =>
        {
            GameService.RemovePlayer(UserId);
            InvokeAsync(StateHasChanged);
        });

        await RefreshUI();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hubConnection.On("RefreshUI", async () =>
            {
                await InvokeAsync(StateHasChanged);
            });

            await _hubConnection.SendAsync("AddPlayerTask", UserId); // todo: consider unhardcoding the string, maybe using nameof keyword?
        }
    }

    async Task RefreshUI() => await _hubConnection.SendAsync("RefreshUITask");

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            // await hubConnection.SendAsync("RemovePlayerTask");
            await _hubConnection.DisposeAsync();
        }
    }


}
